 –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Mini App —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ (–ë–ï–ó —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
project/
‚îú‚îÄ‚îÄ backend/                 # Python FastAPI
‚îÇ   ‚îú‚îÄ‚îÄ main.py             # API —Å–µ—Ä–≤–µ—Ä
‚îÇ   ‚îú‚îÄ‚îÄ database.py         # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
‚îÇ   ‚îú‚îÄ‚îÄ bot.py              # Telegram –±–æ—Ç
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt
‚îÇ   ‚îî‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ frontend/               # React + Vite
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.jsx
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ sql/
    ‚îî‚îÄ‚îÄ init.sql            # –°—Ö–µ–º–∞ –ë–î

üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
Backend:

Python 3.10+ - —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
FastAPI - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
PostgreSQL - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
psycopg2 - PostgreSQL –¥—Ä–∞–π–≤–µ—Ä
python-telegram-bot - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –±–æ—Ç–∞
uvicorn - ASGI —Å–µ—Ä–≤–µ—Ä

Frontend:

React 18 - UI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
Vite - —Å–±–æ—Ä—â–∏–∫
Telegram WebApp SDK - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram

–î–µ–ø–ª–æ–π:

Railway/Render - —Ö–æ—Å—Ç–∏–Ω–≥ backend + PostgreSQL (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
Vercel/Netlify - —Ö–æ—Å—Ç–∏–Ω–≥ frontend (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)


üì¶ –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è (30 –º–∏–Ω—É—Ç)
1.1 –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞
bash# 1. –û—Ç–∫—Ä—ã—Ç—å @BotFather –≤ Telegram
# 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å /newbot
# 3. –£–∫–∞–∑–∞—Ç—å –∏–º—è –±–æ—Ç–∞
# 4. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å!)
# 5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: /setcommands
start - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
1.2 –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
bash# –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
mkdir telegram-deadlines && cd telegram-deadlines

# Backend
mkdir backend && cd backend
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã
pip install fastapi uvicorn psycopg2-binary python-telegram-bot python-dotenv
pip freeze > requirements.txt

# Frontend
cd ..
npm create vite@latest frontend -- --template react
cd frontend
npm install @twa-dev/sdk

üóÑÔ∏è –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (1 —á–∞—Å)
2.1 SQL —Å—Ö–µ–º–∞
sql-- sql/init.sql
CREATE TABLE tasks (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT NOT NULL,
    subject VARCHAR(255) NOT NULL,
    task_type VARCHAR(100) NOT NULL,
    task_number VARCHAR(50),
    points INTEGER,
    deadline_start DATE NOT NULL,
    deadline_end DATE NOT NULL,
    description TEXT,
    first_reminder DATE NOT NULL,
    second_reminder DATE NOT NULL,
    status VARCHAR(50) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_tasks_user_deadline ON tasks(telegram_id, deadline_end);
CREATE INDEX idx_tasks_reminders ON tasks(first_reminder, second_reminder);
CREATE INDEX idx_tasks_status ON tasks(status);
2.2 –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
python# backend/load_data.py
import psycopg2
import os
from dotenv import load_dotenv

load_dotenv()

def load_tasks(telegram_id):
    conn = psycopg2.connect(os.getenv('DATABASE_URL'))
    cur = conn.cursor()
    
    tasks = [
        # –í—Å–µ 46 –∑–∞–¥–∞—á –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        (telegram_id, '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '1', 4, '2025-09-01', '2025-09-30', '–ø–æ –∑–∞–¥–∞–Ω–∏—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ3', '2025-08-17', '2025-09-25'),
        # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)
    ]
    
    for task in tasks:
        cur.execute("""
            INSERT INTO tasks (telegram_id, subject, task_type, task_number, points, 
                             deadline_start, deadline_end, description, 
                             first_reminder, second_reminder)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, task)
    
    conn.commit()
    cur.close()
    conn.close()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")

if __name__ == "__main__":
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    load_tasks(YOUR_TELEGRAM_ID)

üêç –®–∞–≥ 3: Backend API (2-3 –¥–Ω—è)
3.1 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
python# backend/.env
BOT_TOKEN=your_bot_token_here
DATABASE_URL=postgresql://user:password@localhost:5432/telegram_tasks
WEB_APP_URL=https://your-app.vercel.app
3.2 –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
python# backend/database.py
import psycopg2
from psycopg2.extras import RealDictCursor
import os
from dotenv import load_dotenv

load_dotenv()

def get_db():
    return psycopg2.connect(
        os.getenv('DATABASE_URL'),
        cursor_factory=RealDictCursor
    )
3.3 FastAPI —Å–µ—Ä–≤–µ—Ä
python# backend/main.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime, date
from database import get_db

app = FastAPI()

# CORS –¥–ª—è Telegram WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/api/tasks/{telegram_id}")
async def get_tasks(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    conn = get_db()
    cur = conn.cursor()
    
    cur.execute("""
        SELECT * FROM tasks 
        WHERE telegram_id = %s AND status = 'pending'
        ORDER BY deadline_end ASC
    """, (telegram_id,))
    
    tasks = cur.fetchall()
    cur.close()
    conn.close()
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    now = date.today()
    urgent, current, upcoming = [], [], []
    
    for task in tasks:
        days_left = (task['deadline_end'] - now).days
        task['days_left'] = days_left
        
        task_name = task['task_type']
        if task['task_number']:
            task_name += f" {task['task_number']}"
        if task['points']:
            task_name += f" ({task['points']} –±.)"
        task['formatted_name'] = task_name
        
        if days_left < 0 or days_left <= 7:
            task['urgency'] = 'overdue' if days_left < 0 else 'urgent'
            urgent.append(task)
        elif days_left <= 21:
            task['urgency'] = 'current'
            current.append(task)
        else:
            task['urgency'] = 'upcoming'
            upcoming.append(task)
    
    return {'urgent': urgent, 'current': current, 'upcoming': upcoming}

@app.patch("/api/tasks/{task_id}/complete")
async def complete_task(task_id: int):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    conn = get_db()
    cur = conn.cursor()
    
    cur.execute("UPDATE tasks SET status = 'completed' WHERE id = %s", (task_id,))
    
    conn.commit()
    cur.close()
    conn.close()
    
    return {"message": "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}

@app.get("/api/subjects/{telegram_id}")
async def get_subjects(telegram_id: int):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
    conn = get_db()
    cur = conn.cursor()
    
    cur.execute("""
        SELECT 
            subject,
            COUNT(*) as total_tasks,
            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
            SUM(points) as total_points,
            MIN(deadline_end) as nearest_deadline
        FROM tasks 
        WHERE telegram_id = %s
        GROUP BY subject
        ORDER BY nearest_deadline ASC
    """, (telegram_id,))
    
    subjects = cur.fetchall()
    cur.close()
    conn.close()
    
    return {'subjects': subjects}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
3.4 Telegram –±–æ—Ç
python# backend/bot.py
import asyncio
from datetime import date
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler
from database import get_db
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')

async def start(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [[
        InlineKeyboardButton(
            "üìö –û—Ç–∫—Ä—ã—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    ]]
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def stats(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    user_id = update.effective_user.id
    
    conn = get_db()
    cur = conn.cursor()
    
    cur.execute("""
        SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending
        FROM tasks WHERE telegram_id = %s
    """, (user_id,))
    
    stats = cur.fetchone()
    cur.close()
    conn.close()
    
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üìö –í—Å–µ–≥–æ: {stats['total']}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {stats['pending']}"
    )

async def check_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"""
    bot = Bot(token=BOT_TOKEN)
    
    while True:
        try:
            today = date.today()
            conn = get_db()
            cur = conn.cursor()
            
            cur.execute("""
                SELECT DISTINCT telegram_id, subject, task_type, task_number, 
                       points, deadline_end
                FROM tasks 
                WHERE status = 'pending'
                AND (first_reminder = %s OR second_reminder = %s)
            """, (today, today))
            
            reminders = cur.fetchall()
            
            for task in reminders:
                days_left = (task['deadline_end'] - today).days
                task_name = task['task_type']
                if task['task_number']:
                    task_name += f" {task['task_number']}"
                
                await bot.send_message(
                    chat_id=task['telegram_id'],
                    text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                         f"üìö {task['subject']}\n"
                         f"üìù {task_name}\n"
                         f"‚è∞ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
                )
            
            cur.close()
            conn.close()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    
    # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(check_reminders())
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()




–®–∞–≥ 4: Frontend (2-3 –¥–Ω—è)
4.1 –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–¥ App.jsx
// App.jsx
import { useEffect, useState } from 'react';
import WebApp from '@twa-dev/sdk';
import './App.css';

function App() {
    const [tasks, setTasks] = useState({
        urgent: [],
        current: [],
        upcoming: []
    });
    const [subjects, setSubjects] = useState([]);
    const [userId, setUserId] = useState(null);
    const [activeView, setActiveView] = useState('tasks'); // tasks –∏–ª–∏ subjects

    useEffect(() => {
        WebApp.ready();
        WebApp.expand();
        
        const tgUser = WebApp.initDataUnsafe.user;
        setUserId(tgUser?.id);
        
        if (tgUser?.id) {
            loadTasks(tgUser.id);
            loadSubjects(tgUser.id);
        }
    }, []);

    const loadTasks = async (telegramId) => {
        const response = await fetch(`http://localhost:8000/api/tasks/${telegramId}`);
        const data = await response.json();
        setTasks(data);
    };

    const loadSubjects = async (telegramId) => {
       const response = await fetch(`http://localhost:8000/api/subjects/${telegramId}`);
        const data = await response.json();
        setSubjects(data.subjects);
    };

    const completeTask = async (taskId) => {
        await fetch(`http://localhost:8000/api/tasks/${taskId}/complete`, {
            method: 'PATCH'
        });
        loadTasks(userId);
        loadSubjects(userId);
    };

    const TaskCard = ({ task }) => {
        const formatDate = (date) => {
            return new Date(date).toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'long'
            });
        };

        const getUrgencyColor = () => {
            if (task.urgency === 'overdue') return '#ff0000';
            if (task.urgency === 'urgent') return '#ff6b6b';
            return '#666';
        };

        return (
            <div className="task-card" style={{ borderLeftColor: getUrgencyColor() }}>
                <div className="task-header">
                    <h4>{task.subject}</h4>
                    <span className="points">{task.points ? `${task.points} –±.` : ''}</span>
                </div>
                
                <div className="task-info">
                    <p className="task-name">{task.formatted_name}</p>
                    {task.description && (
                        <p className="task-description">{task.description}</p>
                    )}
                </div>

                <div className="task-footer">
                    <div className="deadline-info">
                        <span className="date">
                            üìÖ {formatDate(task.deadline_start)} ‚Äî {formatDate(task.deadline_end)}
                        </span>
                        <span className={`days-left ${task.urgency}`}>
                            {task.days_left >= 0 
                                ? `–û—Å—Ç–∞–ª–æ—Å—å ${task.days_left} –¥–Ω.` 
                                : `–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.abs(task.days_left)} –¥–Ω.`}
                        </span>
                    </div>
                    
                    <button 
                        className="complete-btn"
                        onClick={() => completeTask(task.id)}
                    >
                        ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                    </button>
                </div>

                {task.first_reminder && (
                    <div className="reminders">
                        <small>
                            üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {formatDate(task.first_reminder)} –∏ {formatDate(task.second_reminder)}
                        </small>
                    </div>
                )}
            </div>
        );
    };

    const SubjectCard = ({ subject }) => {
        const progress = subject.total_tasks > 0 
            ? (subject.completed / subject.total_tasks * 100).toFixed(0) 
            : 0;

        return (
            <div className="subject-card">
                <h4>{subject.subject}</h4>
                <div className="subject-stats">
                    <div className="stat">
                        <span className="stat-value">{subject.pending}</span>
                        <span className="stat-label">–û—Å—Ç–∞–ª–æ—Å—å</span>
                    </div>
                    <div className="stat">
                        <span className="stat-value">{subject.completed}</span>
                        <span className="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                    </div>
                    <div className="stat">
                        <span className="stat-value">{subject.total_points || 0}</span>
                        <span className="stat-label">–ë–∞–ª–ª–æ–≤</span>
                    </div>
                </div>
                
                <div className="progress-bar">
                    <div 
                        className="progress-fill" 
                        style={{ width: `${progress}%` }}
                    />
                </div>
                <p className="progress-text">{progress}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</p>
                
                {subject.nearest_deadline && (
                    <p className="next-deadline">
                        –ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–¥–ª–∞–π–Ω: {new Date(subject.nearest_deadline).toLocaleDateString('ru-RU')}
                    </p>
                )}
            </div>
        );
    };

    return (
        <div className="app">
            <header className="app-header">
                <h1>üìö –ú–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã</h1>
                <div className="view-toggle">
                    <button 
                        className={activeView === 'tasks' ? 'active' : ''}
                        onClick={() => setActiveView('tasks')}
                    >
                        –ó–∞–¥–∞—á–∏
                    </button>
                    <button 
                        className={activeView === 'subjects' ? 'active' : ''}
                        onClick={() => setActiveView('subjects')}
                    >
                        –ü—Ä–µ–¥–º–µ—Ç—ã
                    </button>
                </div>
            </header>

            {activeView === 'tasks' ? (
                <div className="tasks-view">
                    {/* –°–†–û–ß–ù–´–ï –ó–ê–î–ê–ß–ò */}
                    <section className="section urgent-section">
                        <div className="section-header">
                            <h2>üî• –°—Ä–æ—á–Ω–æ</h2>
                            <span className="badge">{tasks.urgent.length}</span>
                        </div>
                        {tasks.urgent.length === 0 ? (
                            <p className="empty-state">üéâ –°—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç!</p>
                        ) : (
                            <div className="tasks-list">
                                {tasks.urgent.map(task => (
                                    <TaskCard key={task.id} task={task} />
                                ))}
                            </div>
                        )}
                    </section>

                    {/* –¢–ï–ö–£–©–ò–ï –ó–ê–î–ê–ß–ò */}
                    <section className="section current-section">
                        <div className="section-header">
                            <h2>‚è∞ –¢–µ–∫—É—â–∏–µ</h2>
                            <span className="badge">{tasks.current.length}</span>
                        </div>
                        {tasks.current.length === 0 ? (
                            <p className="empty-state">–¢–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –Ω–µ—Ç</p>
                        ) : (
                            <div className="tasks-list">
                                {tasks.current.map(task => (
                                    <TaskCard key={task.id} task={task} />
                                ))}
                            </div>
                        )}
                    </section>

                    {/* –ë–£–î–£–©–ò–ï –ó–ê–î–ê–ß–ò */}
                    <section className="section upcoming-section">
                        <div className="section-header">
                            <h2>üìÖ –°–∫–æ—Ä–æ</h2>
                            <span className="badge">{tasks.upcoming.length}</span>
                        </div>
                        {tasks.upcoming.length === 0 ? (
                            <p className="empty-state">–ë—É–¥—É—â–∏—Ö –∑–∞–¥–∞—á –Ω–µ—Ç</p>
                        ) : (
                            <div className="tasks-list">
                                {tasks.upcoming.map(task => (
                                    <TaskCard key={task.id} task={task} />
                                ))}
                            </div>
                        )}
                    </section>
                </div>
            ) : (
                <div className="subjects-view">
                    <div className="subjects-list">
                        {subjects.map((subject, index) => (
                            <SubjectCard key={index} subject={subject} />
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}

export default App;

4.2 –°—Ç–∏–ª–∏
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π CSS:
/* App.css */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: #f5f5f5;
}

.app {
    max-width: 800px;
    margin: 0 auto;
    padding-bottom: 20px;
}

/* HEADER */
.app-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    position: sticky;
    top: 0;
    z-index: 100;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.app-header h1 {
    font-size: 24px;
    margin-bottom: 15px;
}

.view-toggle {
    display: flex;
    gap: 10px;
}

.view-toggle button {
    flex: 1;
    padding: 10px;
    border: 2px solid rgba(255,255,255,0.3);
    background: rgba(255,255,255,0.1);
    color: white;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

.view-toggle button.active {
    background: white;
    color: #667eea;
}

/* SECTIONS */
.section {
    margin: 20px 15px;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.section-header h2 {
    font-size: 20px;
    color: #333;
}

.badge {
    background: #667eea;
    color: white;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: bold;
}

.urgent-section .badge {
    background: #ff4444;
}

.current-section .badge {
    background: #ffa500;
}

.upcoming-section .badge {
    background: #4499ff;
}

/* TASK CARDS */
.tasks-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.task-card {
    background: white;
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    border-left: 4px solid #667eea;
    transition: transform 0.2s, box-shadow 0.2s;
}

.task-card:active {
    transform: scale(0.98);
}

.task-header {
    display: flex;
    justify-content: space-between;
    align-items: start;
    margin-bottom: 12px;
}

.task-header h4 {
    font-size: 14px;
    color: #667eea;
    font-weight: 600;
    line-height: 1.4;
    flex: 1;
}

.points {
    background: #f0f0f0;
    padding: 4px 8px;
    border-radius: 6px;
    font-size: 12px;
    font-weight: bold;
    color: #666;
    white-space: nowrap;
    margin-left: 8px;
}

.task-info {
    margin-bottom: 12px;
}

.task-name {
    font-size: 16px;
    font-weight: 600;
    color: #333;
    margin-bottom: 8px;
}

.task-description {
    font-size: 13px;
    color: #666;
    line-height: 1.5;
}

.task-footer {
    display: flex;
    justify-content: space-between;
    align-items: end;
    gap: 10px;
}

.deadline-info {
    flex: 1;
}

.date {
    display: block;
    font-size: 13px;
    color: #666;
    margin-bottom: 4px;
}

.days-left {
    display: inline-block;
    font-size: 12px;
    font-weight: bold;
    padding: 3px 8px;
    border-radius: 4px;
}

.days-left.urgent {
    background: #ffe5e5;
    color: #ff4444;
}

.days-left.overdue {
    background: #ff4444;
    color: white;
}

.days-left.current {
    background: #fff9e5;
    color: #ff8800;
}

.days-left.upcoming {
    background: #e5f5ff;
    color: #4499ff;
}

.complete-btn {
    padding: 10px 16px;
    background: #4CAF50;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 13px;
    font-weight: 600;
    cursor: pointer;
    white-space: nowrap;
    transition: background 0.3s;
}

.complete-btn:active {
    background: #45a049;
}

.reminders {
    margin-top: 10px;
    padding-top: 10px;
    border-top: 1px solid #f0f0f0;
}

.reminders small {
    color: #999;
    font-size: 11px;
}

.empty-state {
    text-align: center;
    padding: 30px;
    color: #999;
    font-style: italic;
}

/* SUBJECT CARDS */
.subjects-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding: 15px;
}

.subject-card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.subject-card h4 {
    font-size: 16px;
    color: #333;
    margin-bottom: 15px;
}

.subject-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    margin-bottom: 15px;
}

.stat {
    text-align: center;
}

.stat-value {
    display: block;
    font-size: 24px;
    font-weight: bold;
    color: #667eea;
}

.stat-label {
    display: block;
    font-size: 12px;
    color: #999;
    margin-top: 4px;
}

.progress-bar {
    height: 8px;
    background: #f0f0f0;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 8px;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    transition: width 0.3s ease;
}

.progress-text {
    font-size: 13px;
    color: #666;
    text-align: center;
}

.next-deadline {
    font-size: 12px;
    color: #ff6b6b;
    text-align: center;
    margin-top: 10px;
    font-weight: 600;
}

/* RESPONSIVE */
@media (max-width: 600px) {
    .app-header h1 {
        font-size: 20px;
    }
    
    .task-footer {
        flex-direction: column;
        align-items: stretch;
    }
    
    .complete-btn {
        width: 100%;
    }
}
4.3 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
javascript// frontend/vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true
      }
    }
  }
})
html<!-- frontend/index.html -->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–ú–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
</head>
<body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
</body>
</html>

üöÄ –®–∞–≥ 5: –î–µ–ø–ª–æ–π (1 –¥–µ–Ω—å)
5.1 Backend –Ω–∞ Railway
bash# 1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ railway.app
# 2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
# 3. –î–æ–±–∞–≤–∏—Ç—å PostgreSQL –∏–∑ Marketplace
# 4. –î–µ–ø–ª–æ–π backend:

cd backend
railway login
railway init
railway up

# 5. –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway Dashboard:
# BOT_TOKEN=...
# WEB_APP_URL=https://your-frontend.vercel.app
5.2 Frontend –Ω–∞ Vercel
bashcd frontend
npm install -g vercel
vercel login
vercel

# –ü—Ä–∏ –¥–µ–ø–ª–æ–µ —É–∫–∞–∑–∞—Ç—å:
# Framework: Vite
# Build Command: npm run build
# Output Directory: dist
5.3 –û–±–Ω–æ–≤–∏—Ç—å URL –≤ –±–æ—Ç–µ
–ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è frontend –æ–±–Ω–æ–≤–∏—Ç–µ WEB_APP_URL –≤ Railway –∏ –≤ –∫–æ–¥–µ –±–æ—Ç–∞.

‚úÖ –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–õ–æ–∫–∞–ª—å–Ω–æ:
bash# Terminal 1 - Backend
cd backend
source venv/bin/activate
python main.py

# Terminal 2 - Frontend  
cd frontend
npm run dev

# Terminal 3 - –ë–æ—Ç
cd backend
python bot.py
Production:

–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram
–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã"
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Telegram


üìä –ò—Ç–æ–≥–æ–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞
–≠—Ç–∞–ø–í—Ä–µ–º—è–î–µ–π—Å—Ç–≤–∏—è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è30 –º–∏–ΩBotFather, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö1 —á–∞—Å–°—Ö–µ–º–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—ÖBackend API2-3 –¥–Ω—èFastAPI, endpointsTelegram –±–æ—Ç1 –¥–µ–Ω—å–ö–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—èFrontend2-3 –¥–Ω—èReact UI–î–µ–ø–ª–æ–π1 –¥–µ–Ω—åRailway + Vercel–ò–¢–û–ì–û7-9 –¥–Ω–µ–π–ì–æ—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

üîë –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
‚úÖ –ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - Telegram ID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è - –∑–∞–¥–∞—á–∏ –¥–µ–ª—è—Ç—Å—è –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–æ—Ç–µ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 15 –∏ 5 –¥–Ω–µ–π
‚úÖ –î–≤–∞ –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø–æ –∑–∞–¥–∞—á–∞–º –∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥ - Railway + Vercel
–ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏! –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –ë–î, –∑–∞—Ç–µ–º backend, –∏ –≤ –∫–æ–Ω—Ü–µ frontend.