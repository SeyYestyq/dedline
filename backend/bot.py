import asyncio
from datetime import date
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler
from database import get_db
from config import BOT_TOKEN, WEB_APP_URL

async def start(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [[
        InlineKeyboardButton(
            "üìö –û—Ç–∫—Ä—ã—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    ]]
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def stats(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    user_id = update.effective_user.id
    
    conn = get_db()
    cur = conn.cursor()
    
    cur.execute("""
        SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending
        FROM tasks WHERE telegram_id = %s
    """, (user_id,))
    
    stats = cur.fetchone()
    cur.close()
    conn.close()
    
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üìö –í—Å–µ–≥–æ: {stats[0]}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats[1]}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {stats[2]}"
    )

async def check_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"""
    bot = Bot(token=BOT_TOKEN)
    
    while True:
        try:
            today = date.today()
            conn = get_db()
            cur = conn.cursor()
            
            cur.execute("""
                SELECT DISTINCT telegram_id, subject, task_type, task_number, 
                       points, deadline_end
                FROM tasks 
                WHERE status = 'pending'
                AND (first_reminder = %s OR second_reminder = %s)
            """, (today, today))
            
            reminders = cur.fetchall()
            
            for task in reminders:
                days_left = (task[5] - today).days
                task_name = task[2]
                if task[3]:
                    task_name += f" {task[3]}"
                
                await bot.send_message(
                    chat_id=task[0],
                    text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                         f"üìö {task[1]}\n"
                         f"üìù {task_name}\n"
                         f"‚è∞ –î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
                )
            
            cur.close()
            conn.close()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    
    # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(check_reminders())
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()